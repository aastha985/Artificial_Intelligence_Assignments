# -*- coding: utf-8 -*-
"""AI Assignment5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PDyc8nthXmgVx-KnJEqhB-V-gwJnW-7D
"""

!apt install swi-prolog
!pip install pyswip

import nltk
nltk.download('punkt')

from pyswip import Prolog
from nltk.tokenize import word_tokenize, sent_tokenize

swipl = Prolog()
swipl.consult("code.pl")

def get_semester(sentence):
  Semester = "monsoon"
  for word in word_tokenize(sentence):
    if word=='monsoon':
      break
    elif word=='winter':
      Semester='winter'
      break
  return Semester

def get_branch(sentence):
  options = ["cse","csai","design","maths","ssh"]
  branch = "cse"

  for word in word_tokenize(sentence):
    for option in options:
      if word==option:
        branch = option

  return branch

def get_courses_list(sentence):
  courses_list = ['ip','os','ada','m3','cn','dsa','ap','dbms','m1','m2','ml','dis','hcd','ra']
  courses = []

  for word in word_tokenize(sentence):
    for course in courses_list:
      if word==course:
        courses.append(course)

  return courses

def isfloat(word):
  try:
    float(word)
    return True
  except ValueError:
    return False

def get_cgpa(sentence):
  cgpa = 0
  for word in word_tokenize(sentence):
    if isfloat(word):
      cgpa = float(word)
  return cgpa

def get_btp(sentence):
  btp = 'true'
  for word in word_tokenize(sentence):
    if word=="not":
      btp = 'false'
  return btp

def get_prediction():
  input_text = input("Enter your input: ")
  sentences = sent_tokenize(input_text)
  semester = get_semester(sentences[0])
  branch = get_branch(sentences[1])
  courses = get_courses_list(sentences[2])
  cgpa = get_cgpa(sentences[3])
  btp = get_btp(sentences[4])

  list(swipl.query('suggest_courses(%s,%s,%s,%s,%s)'%(branch,semester,courses,cgpa,btp)))
  print('\nsuggest_courses(%s,%s,%s,%s,%s)'%(branch,semester,courses,cgpa,btp))

  print("\n---------------------------------------Electives Advised------------------------------------------")
  print("\nWe recommend the following electives for you-\n")
  for course_name in swipl.query("course(X)"):
    print(course_name["X"])

get_prediction()